# rcp: BROKER MODULE
# rcp: auto-generated ros foreign broker file
# rcp: do not edit this file

from .interface import *
import redis
import json

SERVER_ADDR = "0.0.0.0"
SERVER_PORT = 6379
SERVER_DRDB = 0


class _RedisWrapper:
    def __init__(self, host=SERVER_ADDR, port=SERVER_PORT, db=SERVER_DRDB):
        self._redis = redis.Redis(host=host, port=port, db=db)
        self._redis_pubsub = self._redis.pubsub()

    def publish(self, topic, msg):
        return self._redis.publish(topic, msg)

    def subscribe(self, topic):
        return self._redis_pubsub.subscribe(topic)


class RedisMiddleware:
    def __init__(self):
        self._redis_wrapper = _RedisWrapper()
        self._converter = _Converter()

    def send(self, topic, command, msg_type, msg):
        if msg_type is "twist":
            msg = GeometryMsgsTwist(topic, command, msg_type, msg)
            msgJson = self._converter.GeometryMsgsTwistToJson(msg)
        else:
            raise RuntimeError("incorrect ros message type")

        self._redis_wrapper.publish(topic, msgJson)


class _Converter:
    def GeometryMsgsTwistToJson(self, msg):
        return json.dumps(
            {
                "topic": msg.topic,
                "command": msg.command,
                "msg_type": msg.msg_type,
                "data": {
                    "linear": {
                        "x": msg.data.linear.x,
                        "y": msg.data.linear.y,
                        "z": msg.data.linear.z,
                    },
                    "angular": {
                        "x": msg.data.angular.x,
                        "y": msg.data.angular.y,
                        "z": msg.data.angular.z,
                    },
                },
            }
        )
