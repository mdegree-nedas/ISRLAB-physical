# rcp: CORE MODULE
# rcp: auto-generated noros foreign broker file
# rcp: do not edit this file

import json

# from types import FunctionType
from collections.abc import Callable
from .broker import RedisMiddleware
from .template import Template


class Freenove_4wd_smart_car:
    def __init__(self):
        self.sensors = _Sensors()
        self.actuators = _Actuators()
        self.actuators_topics = {
            self.actuators.motion.topic: self.actuators.motion.commands.handler,
        }
        self.broker = RedisMiddleware(self.actuators_topics)


class _Sensors:
    def __init__(self):
        self.ultrasound = _Ultrasound()


class _Ultrasound:
    def __init__(self):
        self.id = "ultrasound_id"
        self.type = "vector"
        self.address = "ultrasound_address"
        self.topic = "ultrasound_topic_noros_to_ros"
        self.data = None
        self.callback = None

    def read(self, _callback=None):
        if _callback == None:
            raise NotImplementedError("_callback is not implemented")
        if not isinstance(_callback, Callable):
            raise RuntimeError("_callback is not callable")
        _callback()


class _Actuators:
    def __init__(self):
        self.templates = Template()
        self.motion = _Motion(self.templates)


class _Motion:
    def __init__(self, templates):
        self.id = "motion_id"
        self.address = "motion_address"
        self.topic = "motion_topic_ros_to_noros"
        self.commands = _MotionCommands(templates)


class _MotionCommands:
    def __init__(self, templates):
        self.go_forward = self._Go_forward(templates)

    def handler(self, msg):
        data = json.loads(msg["data"])
        if (
            data["msg_type"] == self.go_forward.data
            and data["command"] == self.go_forward.name
        ):
            self.go_forward.run(data)

    class _Go_forward:
        def __init__(self, templates):
            self.name = "go_forward"
            self.callback = templates.motion_go_forward_callback
            self.data = "twist"

        def run(self, data):
            if self.callback == None:
                raise NotImplementedError("_callback is not implemented")
            if not isinstance(self.callback, Callable):
                raise RuntimeError("_callback is not callable")
            self.callback(data)
