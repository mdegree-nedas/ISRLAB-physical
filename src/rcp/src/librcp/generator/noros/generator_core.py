from pathlib import Path
import os


class NoRosCoreGenerator:
    def __init__(self):
        self._cfg_dict = None

        self._gen_name_k = None
        self._gen_sensors_k = None
        self._gen_vector_sensors = []
        self._gen_actuators_k = None
        self._gen_vector_actuators = []
        self._gen_commands_k = None
        self._gen_vector_commands = []

    def _initialize(self, cfg_dict, cfg_parse):
        self._cfg_dict = cfg_dict

        (
            self._gen_name_k,
            self._gen_sensors_k,
            self._gen_vector_sensors,
            self._gen_actuators_k,
            self._gen_vector_actuators,
            self._gen_commands_k,
            self._gen_vector_commands,
        ) = cfg_parse[:]

        self._sep = "/"
        self._ext = ".py"

        self._tab = "    "
        self._2tab = self._tab * 2
        self._3tab = self._tab * 3
        self._4tab = self._tab * 4
        self._nl = "\n"

    def _initialize_core(self):
        self._prefix = "."
        self._destdir = "out" + self._sep + self._gen_name_k + self._sep + "noros"
        Path(self._prefix + self._sep + self._destdir).mkdir(
            parents=True, exist_ok=True
        )
        Path(
            self._prefix + self._sep + self._destdir + self._sep + "__init__.py"
        ).touch()

        self._filename = (
            self._prefix + self._sep + self._destdir + self._sep + "core" + self._ext
        )

        payload = [
            "# rcp: CORE MODULE" + self._nl,
            "# rcp: auto-generated noros foreign broker file" + self._nl,
            "# rcp: do not edit this file" + self._nl,
            self._nl,
        ]

        f = open(self._filename, "w")
        f.writelines(payload)
        f.close()

    def generate(self, cfg_dict, cfg_parse):
        self._initialize(cfg_dict, cfg_parse)

        self._initialize_core()

        self._gen_core_imports()

        self._gen_core_main_class()
        self._gen_core_main_class__init__()

        self._gen_core_sensors_class()
        self._gen_core_sensors_class__init__()
        for sensor in self._gen_vector_sensors:
            self._gen_core_sensors_inner_class(sensor)
            self._gen_core_sensors_inner_class_def(sensor)

        self._gen_core_actuators_class()
        self._gen_core_actuators_class__init__()
        for actuator in self._gen_vector_actuators:
            self._gen_core_actuators_inner_class(actuator)
            self._gen_core_actuators_inner_class_def(actuator)
            self._gen_core_actuators_inner_class_commands(actuator)
            self._gen_core_actuators_inner_class_commands_def(actuator)

        self._finalize()

    # ##################################################
    # GEN EXTRA

    def _gen_core_imports(self):
        payload = [
            "import json" + self._nl,
            "# from types import FunctionType" + self._nl,
            "from collections.abc import Callable" + self._nl,
            "from .broker import RedisMiddleware" + self._nl,
            "from .template import Template" + self._nl,
            self._nl,
        ]

        f = open(self._filename, "a")
        f.writelines(payload)
        f.close()

    def _finalize(self):
        print("finalize > noros > " + self._filename)
        os.system("black -q " + self._filename)

    # ##################################################
    # GEN CORE MAIN CLASS

    def _gen_core_main_class(self):
        payload = [
            "class " + self._gen_name_k.capitalize() + ":" + self._nl,
        ]

        f = open(self._filename, "a")
        f.writelines(payload)
        f.close()

    def _gen_core_main_class__init__(self):
        payload = [
            self._tab + "def __init__(self):" + self._nl,
            self._2tab + "self.sensors = _Sensors()" + self._nl,
            self._2tab + "self.actuators = _Actuators()" + self._nl,
            self._2tab + "self.actuators_topics = {" + self._nl,
        ]
        for actuator in self._gen_vector_actuators:
            payload.append(
                self._3tab
                + "self.actuators."
                + actuator
                + ".topic: self.actuators."
                + actuator
                + ".commands.handler,"
                + self._nl
            )
        payload.append(self._2tab + "}" + self._nl)
        payload.append(
            self._2tab
            + "self.broker = RedisMiddleware(self.actuators_topics)"
            + self._nl
            + self._nl
        )

        f = open(self._filename, "a")
        f.writelines(payload)
        f.close()

    # ##################################################
    # GEN CORE SENSORS CLASS

    def _gen_core_sensors_class(self):
        payload = [
            "class _" + self._gen_sensors_k.capitalize() + ":" + self._nl,
        ]

        f = open(self._filename, "a")
        f.writelines(payload)
        f.close()

    def _gen_core_sensors_class__init__(self):
        payload = [self._tab + "def __init__(self):" + self._nl]
        for sensor in self._gen_vector_sensors:
            payload.append(
                self._2tab
                + "self."
                + sensor
                + " = _"
                + sensor.capitalize()
                + "()"
                + self._nl
            )
        payload.append(self._nl)

        f = open(self._filename, "a")
        f.writelines(payload)
        f.close()

    def _gen_core_sensors_inner_class(self, sensor):
        payload = [
            "class _" + sensor.capitalize() + ":" + self._nl,
        ]

        f = open(self._filename, "a")
        f.writelines(payload)
        f.close()

    def _gen_core_sensors_inner_class_def(self, sensor):
        payload = [self._tab + "def __init__(self):" + self._nl]
        for k, v in self._cfg_dict[self._gen_name_k][self._gen_sensors_k][
            sensor
        ].items():
            if type(v) is float:
                payload.append(self._2tab + "self." + k + " = " + str(v) + self._nl)
            else:
                payload.append(self._2tab + "self." + k + ' = "' + v + '"' + self._nl)
        payload.append(self._2tab + "self.callback = None" + self._nl)
        payload.append(self._nl)
        payload.append(self._tab + "def read(self):" + self._nl)
        payload.append(self._2tab + "if self.callback == None:" + self._nl)
        payload.append(
            self._3tab
            + 'raise NotImplementedError("self.callback is not implemented")'
            + self._nl
        )
        payload.append(
            self._2tab + "if not isinstance(self.callback, Callable):" + self._nl
        )
        payload.append(
            self._3tab
            + 'raise RuntimeError("self.callback is not callable")'
            + self._nl
        )
        payload.append(self._2tab + "msg = self.callback()" + self._nl)
        payload.append(self._2tab + "return msg" + self._nl)

        f = open(self._filename, "a")
        f.writelines(payload)
        f.close()

    # ##################################################
    # GEN CORE ACTUATORS CLASS

    def _gen_core_actuators_class(self):
        payload = [
            "class _" + self._gen_actuators_k.capitalize() + ":" + self._nl,
        ]

        f = open(self._filename, "a")
        f.writelines(payload)
        f.close()

    def _gen_core_actuators_class__init__(self):
        payload = [self._tab + "def __init__(self):" + self._nl]
        payload.append(self._2tab + "self.templates = Template()" + self._nl)
        for actuator in self._gen_vector_actuators:
            payload.append(
                self._2tab
                + "self."
                + actuator
                + " = _"
                + actuator.capitalize()
                + "(self.templates)"
                + self._nl
            )
        payload.append(self._nl)

        f = open(self._filename, "a")
        f.writelines(payload)
        f.close()

    def _gen_core_actuators_inner_class(self, actuator):
        payload = [
            "class _" + actuator.capitalize() + ":" + self._nl,
        ]

        f = open(self._filename, "a")
        f.writelines(payload)
        f.close()

    def _gen_core_actuators_inner_class_def(self, actuator):
        payload = [self._tab + "def __init__(self, templates):" + self._nl]
        for k, v in self._cfg_dict[self._gen_name_k][self._gen_actuators_k][
            actuator
        ].items():
            if k != "commands":
                payload.append(
                    self._2tab + "self." + k + " = " + '"' + v + '"' + self._nl
                )
            else:
                payload.append(
                    self._2tab
                    + "self."
                    + k
                    + " = _"
                    + actuator.capitalize()
                    + "Commands(templates)"
                    + self._nl
                )
        payload.append(self._nl)

        f = open(self._filename, "a")
        f.writelines(payload)
        f.close()

    def _gen_core_actuators_inner_class_commands(self, actuator):
        payload = [
            "class _" + actuator.capitalize() + "Commands" + ":" + self._nl,
            self._tab + "def __init__(self, templates):" + self._nl,
        ]

        for command in self._cfg_dict[self._gen_name_k][self._gen_actuators_k][
            actuator
        ]["commands"]:
            payload.append(
                self._2tab
                + "self."
                + command
                + " = self._"
                + command.capitalize()
                + "(templates)"
                + self._nl
            )

        payload.append(self._tab + "def handler(self, msg):" + self._nl)
        payload.append(self._2tab + 'data = json.loads(msg["data"])' + self._nl)
        for command in self._cfg_dict[self._gen_name_k][self._gen_actuators_k][
            actuator
        ]["commands"]:
            payload.append(
                self._2tab
                + 'if(data["msg_type"] == self.'
                + command
                + '.data and data["command"] == self.'
                + command
                + ".name):"
                + self._nl
            )
            payload.append(self._3tab + "self." + command + ".run(data)" + self._nl)

        f = open(self._filename, "a")
        f.writelines(payload)
        f.close()

    def _gen_core_actuators_inner_class_commands_def(self, actuator):
        for command in self._cfg_dict[self._gen_name_k][self._gen_actuators_k][
            actuator
        ]["commands"]:
            payload = [self._tab + "class _" + command.capitalize() + ":" + self._nl]
            payload.append(self._2tab + "def __init__(self, templates):" + self._nl)
            payload.append(self._3tab + "self.name = " + "'" + command + "'" + self._nl)
            payload.append(
                self._3tab
                + "self.callback = "
                + "templates."
                + actuator
                + "_"
                + command
                + "_callback"
                + self._nl
            )
            payload.append(
                self._3tab
                + "self.data = '"
                + self._cfg_dict[self._gen_name_k][self._gen_commands_k][command][
                    "data"
                ]
                + "'"
                + self._nl
            )
            payload.append(
                self._3tab
                + "self.time = "
                + str(
                    self._cfg_dict[self._gen_name_k][self._gen_commands_k][command][
                        "time"
                    ]
                )
                + self._nl
            )
            payload.append(self._nl)
            payload.append(self._2tab + "def run(self, data):" + self._nl)
            payload.append(self._3tab + "if self.callback == None:" + self._nl)
            payload.append(
                self._4tab
                + 'raise NotImplementedError("_callback is not implemented")'
                + self._nl
            )
            payload.append(
                self._3tab + "if not isinstance(self.callback, Callable):" + self._nl
            )
            payload.append(
                self._4tab
                + 'raise RuntimeError("_callback is not callable")'
                + self._nl
            )
            payload.append(self._3tab + "self.callback(data)" + self._nl)
            payload.append(self._nl)

            f = open(self._filename, "a")
            f.writelines(payload)
            f.close()
